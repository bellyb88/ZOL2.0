# Generated by Django 2.2.7 on 2019-11-05 08:37

import app.validators
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('PWZ', models.CharField(blank=True, max_length=10, unique=True)),
                ('department', models.CharField(choices=[('lekarz', 'lekarz'), ('pielegniarka', 'pielegniarka'), ('psycholog', 'psycholog'), ('farmaceuta', 'farmaceuta'), ('administracja', 'administracja')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Choroba',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kod', models.CharField(max_length=6)),
                ('nazwa', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Pacjent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField()),
                ('imie', models.CharField(max_length=50)),
                ('nazwisko', models.CharField(max_length=50)),
                ('nazwisko_rodowe', models.CharField(blank=True, max_length=50)),
                ('pesel', models.CharField(max_length=11, unique=True, validators=[app.validators.validate_pesel])),
                ('plec', models.CharField(choices=[('M', 'Mezczyzna'), ('K', 'Kobieta')], max_length=1)),
                ('miejsce_urodzenia', models.CharField(blank=True, max_length=50)),
                ('imiona_rodzicow', models.CharField(blank=True, max_length=100)),
                ('nr_dowodu', models.CharField(blank=True, max_length=10, validators=[app.validators.validate_IDnr])),
                ('nr_leg_zus', models.CharField(blank=True, max_length=24, validators=[app.validators.validate_nr_leg_zus])),
                ('data_wydania_zus', models.DateField(blank=True, null=True)),
                ('data_waznosci_zus', models.DateField(blank=True, null=True)),
                ('nr_ksiegi', models.CharField(blank=True, max_length=9)),
                ('osoba_kontaktu', models.TextField(blank=True)),
                ('wysokosc_swiadczenia', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('data_przyjecia', models.DateField()),
                ('tryb_przyjecia', models.CharField(blank=True, choices=[('PILNY', 'PILNY'), ('STABILNY', 'STABILNY')], max_length=8)),
                ('data_skierowania', models.DateField(blank=True, null=True)),
                ('pwz_zlecajacego', models.IntegerField(blank=True, null=True, validators=[app.validators.validate_PWZ])),
                ('wzrost', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('waga', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('barthel', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('epikryza', models.TextField(blank=True)),
                ('zalecenia', models.TextField(blank=True)),
                ('wyniki', models.TextField(blank=True)),
                ('pozostale_choroby', models.TextField(blank=True)),
                ('choroby', models.ManyToManyField(to='app.Choroba')),
            ],
            options={
                'verbose_name': 'Pacjent',
                'verbose_name_plural': 'Pacjenci',
                'ordering': ['nazwisko'],
            },
            managers=[
                ('wszyscy', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Zywienie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('data_od', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_do', models.DateTimeField(blank=True, null=True)),
                ('dieta', models.CharField(choices=[('Nutrison', 'Nutrison'), ('Cubison', 'Cubison'), ('Diason', 'Diason'), ('Mix', 'Mix'), ('Naprzemienna', 'Naprzemienna')], max_length=10)),
                ('dieta_objetosc', models.CharField(max_length=4)),
                ('woda_objetosc', models.CharField(max_length=4)),
                ('glasgow', models.PositiveSmallIntegerField()),
                ('pacjent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Pacjent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Zlecenia żywienia',
            },
        ),
        migrations.CreateModel(
            name='Wypis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('data_od', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_do', models.DateTimeField(blank=True, null=True)),
                ('miejsce_wypisu', models.CharField(blank=True, max_length=100)),
                ('przyczyna_wypisu', models.TextField(blank=True)),
                ('tryb', models.CharField(choices=[('Zakończenie procesu terapeutycznego lub diagnostycznego', 'Zakończenie procesu terapeutycznego lub diagnostycznego'), ('Skierowanie do dalszego leczenia w lecznictwie ambulatoryjnym', 'Skierowanie do dalszego leczenia w lecznictwie ambulatoryjnym'), ('Skierowanie do dalszego leczenia w innym szpitalu', 'Skierowanie do dalszego leczenia w innym szpitalu'), ('Wypisanie na własne żądanie', 'Wypisanie na własne żądanie'), ('Osoba leczona samowolnie opuściła ZOL', 'Osoba leczona samowolnie opuściła ZOL'), ('Wypisanie na podstawie art. 221 pkt 3 ustawy o ZOZ', 'Wypisanie na podstawie art. 221 pkt 3 ustawy o ZOZ'), ('Zgon pacjenta', 'Zgon pacjenta'), ('Osoba leczona, która samowolnie opuściła podmiot leczniczy', 'Osoba leczona, która samowolnie opuściła podmiot leczniczy')], max_length=100)),
                ('pacjent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Pacjent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Wypisy',
            },
        ),
        migrations.CreateModel(
            name='Przepustka',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('data_od', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_do', models.DateTimeField(blank=True, null=True)),
                ('tresc', models.TextField(blank=True)),
                ('pacjent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Pacjent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Przepustki',
            },
        ),
        migrations.CreateModel(
            name='Dekursus_psych',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('data', models.DateField(default=django.utils.timezone.now)),
                ('tresc', models.TextField()),
                ('pacjent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Pacjent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dekursus psychologa',
                'verbose_name_plural': 'Dekursysy psychologa',
            },
        ),
        migrations.CreateModel(
            name='Dekursus_piel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('data', models.DateField(default=django.utils.timezone.now)),
                ('tresc', models.TextField()),
                ('pacjent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Pacjent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dekursus pielęgniarski',
                'verbose_name_plural': 'Dekursysy pielęgniarskie',
            },
        ),
        migrations.CreateModel(
            name='Dekursus_lek',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('data', models.DateField(default=django.utils.timezone.now)),
                ('tresc', models.TextField()),
                ('pacjent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Pacjent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dekursus lekarski',
                'verbose_name_plural': 'Dekursysy lekarskie',
            },
        ),
        migrations.CreateModel(
            name='Zgon',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('data', models.DateField(default=django.utils.timezone.now)),
                ('pacjent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.Pacjent')),
                ('godzina', models.TimeField()),
                ('bezposrednia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bezposrednia_przyczyna', to='app.Choroba')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('wtorna', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wtorna_przyczyna', to='app.Choroba')),
                ('wyjsciowa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wyjsciowa_przyczyna', to='app.Choroba')),
            ],
            options={
                'verbose_name_plural': 'Zgony',
            },
        ),
    ]
